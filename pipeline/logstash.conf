input {
  beats {
    port => 5040
    type => "sefaz"
    tags => "sefaz"
  }
}

filter {
  if [type] == "sefaz" {
    grok {
      match => {"[log][file][path]" => "KMMSefazProxy.log.%{WORD:tipo_arquivo}"}
    }
    grok {
      match => {"message" => "%{WORD:mes} %{MONTHDAY:dia}, %{YEAR:ano} %{TIME:hora} %{WORD:ampm} (?<classe>\S+) %{NOTSPACE:funcao}\n%{DATA:tipo_log}:(?<mensagem>(.|\r|\n)*)"}
    }
    mutate {
    uppercase => [ "mes" ]
    }
    mutate {
    add_field => {"datahora" => "%{dia}-%{mes}-%{ano} %{hora} %{ampm}"}
    }
    date {
    locale => "pt_BR"
    timezone => "UTC"
    match => [ "datahora", "dd-MMM-yyyy hh:mm:ss a" ]
    target => "@timestamp"
    }
    if "proxy" == [tipo_arquivo] {
      grok {
      match => {"mensagem" => "\s%{GREEDYDATA:request_tipo}\sID\s%{INT:request_id}"}
      }
      if "Request" == [request_tipo] {
        grok {
          match => {"mensagem" => "URL:\s%{WORD:request_method}\s%{GREEDYDATA:request_url}"}
        }
        grok {
          match => {"mensagem" => "URL:\s%{WORD:request_method}\s%{URIPROTO}://%{URIHOST:request_domain}"}
        }
        aggregate {
          task_id => "%{request_id}"
          code => "map['request_url'] = event.get('request_url');
                  map['request_domain'] = event.get('request_domain');"
          map_action => "create"
        }
      }
      if "Proxy" == [request_tipo] {
        grok {
          match => {"mensagem" => "request:(?<request_data>(.|\r|\n)*)"}
        }
        aggregate {
          task_id => "%{request_id}"
          code => "map['request_data'] = event.get('request_data');"
          map_action => "update"
        }
      }
      if "Code response" == [request_tipo] {
        grok {
          match => {"message" => "INFORMAÇÕES: Code response ID\s%{INT}:\s%{INT:request_code}"}
        }
        aggregate {
          task_id => "%{request_id}"
          code => "map['request_code'] = event.get('request_code');"
          map_action => "update"
        }
      }
      if "Proxy response" == [request_tipo] {
        grok {
          match => {"message" => "response_time\":\s%{WORD:req_time}"}
        }
        grok {
          match => {"message" => "response_code\":\s%{WORD:req_code}"}
        }
        grok {
          match => {"message" => "\s%{GREEDYDATA}\sID\s%{INT}:\s(?m)%{GREEDYDATA:res_data}"}
        }
        aggregate {
          task_id => "%{request_id}"
          code => "event.set('req_url', map['request_url']); 
                  event.set('req_domain', map['request_domain']);
                  event.set('req_data', map['request_data']);
                  event.set('manter', 'sim');"
          map_action => "update"
          end_of_task => true
          timeout => 60
        }
      }
#      if ![manter] {
#        drop {}
#      }
    }
    mutate { 
      remove_field => [ "ampm", "ano", "dia", "hora", "mes", "request_code", "request_data", "request_url", "request_domain", "manter" ] 
    }
  }
}

output {
#  stdout { codec => rubydebug }
  elasticsearch {
#    index => "logstash-%{+yyyy.MM.dd}"
    index => "logstash"
    hosts => ["elasticsearch:9200"]
    password => "V1129power!"
    user => "elastic"     
#    template => "/usr/share/logstash/pipeline/template_logs.json"
#    template_name => "logstash"
#    template_overwrite => true
  }
}